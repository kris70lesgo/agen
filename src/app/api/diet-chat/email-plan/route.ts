import { NextRequest } from "next/server";
import { marked } from "marked";

const BREVO_ENDPOINT = process.env.BREVO_ENDPOINT?.trim() || "https://api.brevo.com/v3/smtp/email";

interface EmailPlanRequest {
  planMarkdown?: string;
  to?: string;
  subject?: string;
}

export async function POST(request: NextRequest) {
  let body: EmailPlanRequest;

  try {
    body = await request.json();
  } catch (error) {
    console.error("Email plan route: invalid JSON", error);
    return Response.json({ error: "Invalid JSON payload" }, { status: 400 });
  }

  const planMarkdown = body.planMarkdown?.trim();
  const recipient = body.to?.trim();
  const subject = body.subject?.trim() || "Your personalized weekly diet plan";

  if (!planMarkdown || !recipient) {
    return Response.json(
      { error: "Missing required 'planMarkdown' or 'to' fields." },
      { status: 400 }
    );
  }

  const brevoKey = process.env.BREVO_API_KEY?.trim();
  const senderEmail = process.env.FROM_EMAIL?.trim();
  const senderName = process.env.FROM_NAME?.trim() || "Nutrition Coach";

  if (!brevoKey || !senderEmail) {
    return Response.json(
      { error: "Missing BREVO_API_KEY or FROM_EMAIL environment variables." },
      { status: 500 }
    );
  }

  const htmlBody = buildEmailHTML(planMarkdown);

  const payload = {
    sender: { email: senderEmail, name: senderName },
    to: [{ email: recipient }],
    subject,
    htmlContent: htmlBody,
  };

  try {
    const response = await fetch(BREVO_ENDPOINT, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "api-key": brevoKey,
        Accept: "application/json",
      },
      body: JSON.stringify(payload),
    });

    const resultText = await response.text();
    let parsed: unknown;
    try {
      parsed = JSON.parse(resultText);
    } catch {
      parsed = resultText;
    }

    if (!response.ok) {
      const message =
        typeof parsed === "object" && parsed !== null && "message" in parsed
          ? String((parsed as { message?: string }).message ?? "Brevo request failed")
          : "Brevo request failed";
      return Response.json({ error: message, details: parsed }, { status: response.status });
    }

    return Response.json({ success: true, details: parsed });
  } catch (error) {
    console.error("Brevo email send failed", error);
    return Response.json(
      { error: "Unexpected error while contacting Brevo." },
      { status: 500 }
    );
  }
}

function buildEmailHTML(markdown: string) {
  const content = marked.parse(markdown, { breaks: true });
  return `<!doctype html>
<html>
  <head>
    <meta charset="utf-8" />
    <title>Diet Plan</title>
    <style>
      body { font-family: 'Segoe UI', Arial, sans-serif; margin: 0; padding: 32px; background-color: #f8fafc; color: #0f172a; }
      h1, h2, h3 { color: #0f172a; }
      .container { max-width: 720px; margin: 0 auto; background: #ffffff; border-radius: 16px; padding: 32px; box-shadow: 0 20px 45px rgba(15, 23, 42, 0.08); }
      .footer { margin-top: 40px; font-size: 12px; color: #64748b; }
      table { width: 100%; border-collapse: collapse; }
      th, td { padding: 12px; border: 1px solid #e2e8f0; text-align: left; }
      ul, ol { padding-left: 24px; }
      strong { color: #0f172a; }
    </style>
  </head>
  <body>
    <div class="container">
      ${content}
      <div class="footer">Generated by your AI nutrition coach.</div>
    </div>
  </body>
</html>`;
}
